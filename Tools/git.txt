1:"$Sreact.fragment"
2:I[79520,["/_next/static/chunks/cc666fe7ba428f8d.js","/_next/static/chunks/663bbb793cf38ec5.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],""]
3:I[35974,["/_next/static/chunks/cc666fe7ba428f8d.js","/_next/static/chunks/663bbb793cf38ec5.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"ThemeProvider"]
4:I[20908,["/_next/static/chunks/cc666fe7ba428f8d.js","/_next/static/chunks/663bbb793cf38ec5.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
5:I[39756,["/_next/static/chunks/cc666fe7ba428f8d.js","/_next/static/chunks/663bbb793cf38ec5.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
6:I[37457,["/_next/static/chunks/cc666fe7ba428f8d.js","/_next/static/chunks/663bbb793cf38ec5.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
1e:I[68027,["/_next/static/chunks/cc666fe7ba428f8d.js","/_next/static/chunks/663bbb793cf38ec5.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
:HL["/_next/static/chunks/0c4eabfa79804833.css","style"]
0:{"P":null,"b":"hlj1rJtO8U-yt5DkQvMUj","p":"","c":["","Tools","git"],"i":false,"f":[[["",{"children":["Tools",{"children":["git",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/0c4eabfa79804833.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/cc666fe7ba428f8d.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/663bbb793cf38ec5.js","async":true,"nonce":"$undefined"}],["$","script","script-2",{"src":"/_next/static/chunks/7dd66bdf8a7e5707.js","async":true,"nonce":"$undefined"}]],["$","html",null,{"lang":"en","data-theme":"dark","children":[["$","head",null,{"children":[["$","style",null,{"children":"\n        "}],["$","$L2",null,{"id":"theme-script","strategy":"beforeInteractive","children":"\n            (function() {\n              const theme = localStorage.getItem('data-theme') || 'dark';\n              document.documentElement.dataset.theme = theme;\n              document.documentElement.setAttribute('data-theme', theme);\n            })();\n          "}]]}],["$","body",null,{"id":"root","children":["$","$L3",null,{"children":["$","$L4",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]]}]]}],{"children":["Tools",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["git",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"gitOverview","children":"Git Overview"}],["$","p",null,{"children":["Git main site: ",["$","a",null,{"href":"https://git-scm.com/","children":"git-scm.com/"}]]}],["$","p",null,{"children":"Git GUI: Visual Studio Code and various others"}],["$","h4",null,{"className":"sub-section-header","children":"Purpose"}],["$","ul",null,{"children":[["$","li",null,{"children":"To save snapshot/ commit"}],["$","li",null,{"children":"Version control"}],["$","li",null,{"children":"Collaborating on same file/project at the same time"}],["$","li",null,{"children":"Splitting production and development code"}],["$","ul",null,{"children":[["$","li",null,{"children":"For example: having the main branch be the production code"}],["$","li",null,{"children":"The side branch will be for current development where testing and changes can be done without affecting production build"}],["$","li",null,{"children":"Once changes are done, then the side branch can be merge with the main one (through pull requests) and then delete the side branch"}]]}]]}],["$","hr",null,{}]]}],["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"gitConcept","children":"Git Concepts"}],["$","h4",null,{"className":"sub-section-header","children":"The 4 Levels of Git"}],["$","ul",null,{"children":[["$","li",null,{"children":"Remote repo level: the central location of the repo"}],"$L7","$L8","$L9","$La","$Lb"]}],"$Lc","$Ld","$Le","$Lf","$L10","$L11","$L12","$L13","$L14"]}],"$L15","$L16","$L17","$L18","$L19","$L1a","$L1b"],null,"$L1c"]}],{},null,false]},null,false]},null,false]},null,false],"$L1d",false]],"m":"$undefined","G":["$1e",["$L1f"]],"s":false,"S":true}
2a:I[97367,["/_next/static/chunks/cc666fe7ba428f8d.js","/_next/static/chunks/663bbb793cf38ec5.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"OutletBoundary"]
2c:I[11533,["/_next/static/chunks/cc666fe7ba428f8d.js","/_next/static/chunks/663bbb793cf38ec5.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"AsyncMetadataOutlet"]
2e:I[97367,["/_next/static/chunks/cc666fe7ba428f8d.js","/_next/static/chunks/663bbb793cf38ec5.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"ViewportBoundary"]
30:I[97367,["/_next/static/chunks/cc666fe7ba428f8d.js","/_next/static/chunks/663bbb793cf38ec5.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"MetadataBoundary"]
31:"$Sreact.suspense"
7:["$","ul",null,{"children":["$","li",null,{"children":"Git Providers: GitHub, GitLab, GitBucket"}]}]
8:["$","li",null,{"children":"Local repo level: a copy of the repo on the local computer including any local changes made to it"}]
9:["$","ul",null,{"children":["$","li",null,{"children":"Local repo use push/pull to synch changes with remote repo"}]}]
a:["$","li",null,{"children":"Stage area level: the area where changes to the files/folders are made before being commited to the local repo"}]
b:["$","li",null,{"children":"Local folder level: the development code on the computer"}]
c:["$","h4",null,{"className":"sub-section-header","children":"Branches"}]
d:["$","p",null,{"children":"Create a copy of same code in main repo to work on without affecting the main branch"}]
e:["$","ul",null,{"children":[["$","li",null,{"children":"Use to make changes without affecting the production code (i.e. main branch)"}],["$","li",null,{"children":"Example: create a branch to fix a bug/ add feature, and once it's done, commit and push it to the remote repo branch, and do a pull request to have it merged with the main one"}]]}]
f:["$","p",null,{"children":"You can only have one copy of the repo locally; if the repo have multiple branches, switching branches will change the local folders to match that branch"}]
10:["$","ul",null,{"children":["$","li",null,{"children":"i.e. Only one branch of a repo can exist in the local folder at a time"}]}]
11:["$","h4",null,{"className":"sub-section-header","children":"HEAD"}]
12:["$","p",null,{"children":"The HEAD is the pointer to the commit you're currently working on."}]
13:["$","ul",null,{"children":[["$","li",null,{"children":"When switching branch, it will move to the last commit in that branch"}],["$","li",null,{"children":"When switching branch and the branch is new, it's just a copy of the previous branch, but it's pointing to the lastest commit of the new branch"}]]}]
14:["$","hr",null,{}]
15:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"gitKeyFiles","children":"Key Files"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"git/"}]," : folder that has local git settings"]}],["$","li",null,{"children":[["$","code",null,{"children":".gitconfig"}]," file"]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":".gitconfig"}]," : global git setting file, usually in the User folder"]}],["$","li",null,{"children":[["$","code",null,{"children":".git/config"}]," : local git setting file, in the local repo location"]}]]}],["$","li",null,{"children":[["$","code",null,{"children":".gitignore"}]," file : file in repo root that tells git what to ignore by listing out the files/folders in it, like log files"]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"logs/"}]," will ignore everything in logs folder"]}],["$","li",null,{"children":[["$","code",null,{"children":"log.txt"}]," will ignore the file log.txt"]}],["$","li",null,{"children":[["$","code",null,{"children":"logs/*.txt"}]," will ignore all .txt files inside the log folder"]}]]}],["$","li",null,{"children":[["$","code",null,{"children":".gitkeep"}]," file : git ignores empty folder, so dev use this to make git recognize an empty folder by putting a ",["$","code",null,{"children":".gitkeep"}]," file in there"]}]]}],["$","hr",null,{}]]}]
16:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"gitCmd","children":"Common Git Commands"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"git add .|filename"}]," : add all/filename changes to the staging area"]}],["$","li",null,{"children":[["$","code",null,{"children":"git commit -m message"}]," : commit changes in staging area to local repo and tag the commit with the message "]}],["$","ul",null,{"children":["$","li",null,{"children":"Message standard: describe changes, be in present tense, and max of 50 characters"}]}],["$","li",null,{"children":[["$","code",null,{"children":"git clone URL"}]," : clone the repo from the specified URL into the current directory"]}],["$","li",null,{"children":[["$","code",null,{"children":"git push/pull"}]," : sync changes between local and remote repo"]}],["$","li",null,{"children":[["$","code",null,{"children":"git status"}]," : view overview of changes"]}],["$","li",null,{"children":[["$","code",null,{"children":"git log"}]," : give history of repo"]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"git log --grep searchTerm"}]," : search through log"]}],["$","li",null,{"children":[["$","code",null,{"children":"git log --oneline"}]," : display concise log format with only commit id and message on one line"]}]]}],["$","li",null,{"children":[["$","code",null,{"children":"git restore .|filename"}]," : undo changes in staging area"]}],["$","li",null,{"children":[["$","code",null,{"children":"git revert commitId"}]," : revert the changes to the commit with the id"]}],["$","ul",null,{"children":["$","li",null,{"children":"git does not delete history, but will add on to it by stating the changes that reverted the repo"}]}]]}],["$","h4",null,{"className":"sub-section-header","children":"Good Commands for Debugging"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"git stash"}]," : save any uncommited changes in the staging area"]}],["$","ul",null,{"children":["$","li",null,{"children":[["$","code",null,{"children":"git stash pop"}]," : load the uncommited changes you saved back to the staging area"]}]}],["$","li",null,{"children":[["$","code",null,{"children":"git switch branchName"}]," : switch to another branch, branchName, and move the current HEAD to point to the branch's last commit"]}],["$","ul",null,{"children":["$","li",null,{"children":[["$","code",null,{"children":"git switch -c newBranch"}]," : create and switch to new branch, but since it's a new branch, it copies the main branch and all the commits you've done so far"]}]}],["$","li",null,{"children":[["$","code",null,{"children":"git merge sourceBranch"}]," : merge current branch with source branch"]}],["$","li",null,{"children":[["$","code",null,{"children":"git branch newBranch"}]," : create new branch without switching to it"]}],["$","li",null,{"children":[["$","code",null,{"children":"git reset --hard HEAD~x|Head~commitHash"}]," : revert the current branch by 'x' commits or to the commitHash"]}],["$","ul",null,{"children":["$","li",null,{"children":[["$","code",null,{"children":"git log --oneline"}]," : display concise log format with only commit id and message on one line"]}]}],["$","li",null,{"children":[["$","code",null,{"children":"git revert commitHash"}]," : revert the changes to the commit with the id"]}],["$","li",null,{"children":[["$","code",null,{"children":"git cherry-pick commitHash"}]," : copies the commit changes from commitHash to the current branch, but does not revert it in the old branch"]}]]}],["$","hr",null,{}]]}]
17:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"tagging","children":"Tagging"}],["$","p",null,{"children":"Tagging is used to mark the commits in a repo history, usually to mark releases (v1.0, v1.1, v2.0)"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"git tag tagName commitHash"}]," : create a lightweight tag with the name tagName for the commitHash"]}],["$","li",null,{"children":[["$","code",null,{"children":"git tag -a tagName -m \"message\" commitHash"}]," : create an annotated tag that allow us to add a message to the tag (more commonly use)"]}],["$","li",null,{"children":[["$","code",null,{"children":"git tag -ln"}]," : list tag with their annotations"]}],["$","li",null,{"children":[["$","code",null,{"children":"git tag -ln \"v1.*\""}]," : filter tag so only version 1 tags are shown"]}],["$","li",null,{"children":[["$","code",null,{"children":"git tag --delete tagName"}]," : delete the tag with the name tagName"]}],["$","li",null,{"children":[["$","code",null,{"children":"git push origin tagName"}]," : push a tag to the remote repo because tags are not pushed by default"]}],["$","li",null,{"children":[["$","code",null,{"children":"git push origin --tags"}]," : push all tags to the remote repo"]}],["$","li",null,{"children":[["$","code",null,{"children":"git fetch"}]," : fetch commits and tags"]}]]}],["$","hr",null,{}]]}]
18:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"mergeConflicts","children":"Merge Conflicts"}],["$","p",null,{"children":["GitHub docs: ",["$","a",null,{"href":"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-using-the-command-line","children":"link"}]]}],["$","p",null,{"children":["GitLab docs: ",["$","a",null,{"href":"https://docs.gitlab.com/user/project/merge_requests/conflicts/#in-the-inline-editor","children":"link"}]]}],["$","hr",null,{}]]}]
19:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"wrongBranch","children":"Wrong Branch"}],["$","ol",null,{"children":[["$","li",null,{"children":"If working on the wrong branch and did NOT commit the changes yet:"}],["$","ul",null,{"children":[["$","li",null,{"children":"Do the following and continue working on the correct branch"}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"git stash\ngit <span class=\"token keyword\">switch</span> correct<span class=\"token operator\">-</span>branch\ngit stash apply"}}]}],["$","li",null,{"children":["If the correct branch doesn't exist yet then replace the second line with ",["$","code",null,{"children":"git switch -c correctBranch"}]]}]]}],["$","li",null,{"children":"If working on the wrong branch and commited the changes 1 time, but did NOT push the changes:"}],["$","ul",null,{"children":[["$","li",null,{"children":"Do the following and continue working on the correct branch"}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"git reset <span class=\"token operator\">--</span>soft <span class=\"token constant\">HEAD</span><span class=\"token operator\">^</span>\ngit <span class=\"token keyword\">switch</span> correct<span class=\"token operator\">-</span>branch\ngit commit <span class=\"token operator\">-</span>c <span class=\"token constant\">ORIG_HEAD</span>"}}]}],["$","li",null,{"children":"reset --soft Head^ will reverse the commit and put the changes back into the staging area"}]]}],["$","li",null,{"children":"If working on the wrong branch and commited many changes, but did NOT push the changes:"}],["$","ul",null,{"children":[["$","li",null,{"children":"Do the following and continue working on the correct branch"}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"git stash                       # skip <span class=\"token keyword\">if</span> all changes are committed\ngit branch <span class=\"token keyword\">new</span><span class=\"token operator\">-</span>branch       # create the <span class=\"token keyword\">new</span> <span class=\"token class-name\">branch</span> but does not <span class=\"token keyword\">switch</span> to it\ngit reset <span class=\"token operator\">--</span>hard origin<span class=\"token operator\">/</span>main    # reset <span class=\"token function\">current</span> <span class=\"token punctuation\">(</span>wrong<span class=\"token punctuation\">)</span> branch to match the remote main\ngit <span class=\"token keyword\">switch</span> <span class=\"token keyword\">new</span><span class=\"token operator\">-</span>branch       # <span class=\"token keyword\">switch</span> to correct branch         \ngit stash pop                   # skip <span class=\"token keyword\">if</span> all changes were committed"}}]}],["$","li",null,{"children":"Now the commits are on the new branch, and you can merge it with the correct branch if it exist already"}]]}],["$","li",null,{"children":"If working on the wrong branch and you already pushed the changes:"}],["$","ul",null,{"children":[["$","li",null,{"children":["Switch to the wrong branch, view the ",["$","code",null,{"children":"git log"}],", ",["$","code",null,{"children":"git reverse"}]," the commits; then switch to the correct branch and ",["$","code",null,{"children":"git cherry-pick the right commits"}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"git <span class=\"token keyword\">switch</span> wrong_branch\ngit revert commitHash1\ngit <span class=\"token keyword\">switch</span> right_branch\ngit cherry<span class=\"token operator\">-</span>pick commitHash1"}}]}],"$L20"]}]]}],"$L21"]}]
1a:["$","h3",null,{"className":"section-header","id":"cmdTables","children":"Git Commands Table"}]
1b:["$","section",null,{"children":[["$","h3",null,{"children":"Editing files / folders"}],["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"Command"}],["$","th",null,{"children":"Description"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git status"}]}],["$","td",null,{"children":"Show changed files, staged changes, and branch info."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git add <file>"}]}],["$","td",null,{"children":"Stage a file's changes for the next commit."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git add -p"}]}],["$","td",null,{"children":"Interactively stage hunks from files."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git restore <file>"}]}],["$","td",null,{"children":"Discard unstaged changes in a file (restore from last commit)."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git restore --staged <file>"}]}],["$","td",null,{"children":"Unstage a file (remove from index but keep working changes)."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git checkout -- <file>"}]}],["$","td",null,{"children":["Old form to discard changes in a file (use ",["$","code",null,{"children":"git restore"}]," now)."]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git mv <old> <new>"}]}],["$","td",null,{"children":"Rename or move a file (stages the change)."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git rm <file>"}]}],["$","td",null,{"children":"Remove a file and stage its deletion."}]]}]]}]]}],["$","h3",null,{"children":"Branches"}],["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"Command"}],["$","th",null,{"children":"Description"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git branch <name>"}]}],["$","td",null,{"children":"Create a new branch pointing at the current commit (does not switch)."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git switch <name>"}]}],["$","td",null,{"children":"Switch to an existing branch."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git switch -c <name>"}]}],["$","td",null,{"children":"Create a new branch and switch to it (shortcut for create+switch)."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git merge <branch>"}]}],["$","td",null,{"children":"Merge another branch into the current branch (creates a merge commit unless fast-forward)."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git rebase <base>"}]}],["$","td",null,{"children":"Reapply commits on top of <base> (rewrites history of the current branch)."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git branch -d <name>"}]}],["$","td",null,{"children":"Delete a branch (safe: only deletes if merged)."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git branch -D <name>"}]}],["$","td",null,{"children":"Force-delete a branch even if unmerged (dangerous)."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git push origin --delete <name>"}]}],["$","td",null,{"children":"Delete a remote branch."}]]}]]}]]}],["$","h3",null,{"children":"Staging area & commits"}],["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"Command"}],["$","th",null,{"children":"Description"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git add <file>"}]}],["$","td",null,{"children":"Stage file changes (put changes into the index for the next commit)."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git restore --staged <file>"}]}],["$","td",null,{"children":"Unstage a file (remove it from the index)."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git commit -m \"msg\""}]}],["$","td",null,{"children":"Create a commit from staged changes with message \"msg\"."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git commit --amend"}]}],["$","td",null,{"children":"Amend the most recent commit (modify message or add new staged changes)."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git reset --soft <commit>"}]}],"$L22"]}],"$L23","$L24","$L25","$L26","$L27"]}]]}],"$L28","$L29"]}]
1c:["$","$L2a",null,{"children":["$L2b",["$","$L2c",null,{"promise":"$@2d"}]]}]
1d:["$","$1","h",{"children":[null,[["$","$L2e",null,{"children":"$L2f"}],null],["$","$L30",null,{"children":["$","div",null,{"hidden":true,"children":["$","$31",null,{"fallback":null,"children":"$L32"}]}]}]]}]
1f:["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/0c4eabfa79804833.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]
20:["$","li",null,{"children":"Now the commits are on the correct branch, and you can continue with your code"}]
21:["$","hr",null,{}]
22:["$","td",null,{"children":"Move HEAD to <commit> but keep staged and working changes."}]
23:["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git reset --mixed <commit>"}]}],["$","td",null,{"children":"Move HEAD to <commit> and reset the index (unstage changes) but keep working files."}]]}]
24:["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git reset --hard <commit>"}]}],["$","td",null,{"children":"Move HEAD to <commit> and reset index + working tree (discard changes)."}]]}]
25:["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git stash"}]}],["$","td",null,{"children":"Save uncommitted changes to the stash stack and clean the working directory."}]]}]
26:["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git stash pop"}]}],["$","td",null,{"children":"Apply the latest stash and remove it from the stash list."}]]}]
27:["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git stash apply"}]}],["$","td",null,{"children":"Apply a stash but keep it in the stash list."}]]}]
28:["$","h3",null,{"children":"Repository management (remote & history)"}]
29:["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"Command"}],["$","th",null,{"children":"Description"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git init"}]}],["$","td",null,{"children":"Create a local repo in the current directory"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git clone <url>"}]}],["$","td",null,{"children":"Clone a remote repository to your local machine."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git remote add origin <url>"}]}],["$","td",null,{"children":"Add a new remote repo and give it the alias origin."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git remote add <name> <url>"}]}],["$","td",null,{"children":"Add a new remote reference. <name> is an alias (origin is commonly used), not the name of the repo"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git remote -v"}]}],["$","td",null,{"children":"List remotes and their URLs."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git fetch"}]}],["$","td",null,{"children":"Download commits, refs, and objects from remote without merging."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git pull"}]}],["$","td",null,{"children":[["$","code",null,{"children":"git fetch"}]," then merge (or rebase) remote changes into current branch."]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git push"}]}],["$","td",null,{"children":"Upload local branch commits to the remote."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git log"}]}],["$","td",null,{"children":"Show commit history for the current branch."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git reflog"}]}],["$","td",null,{"children":"Show local history of HEAD movements (useful to recover lost commits)."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git tag <name>"}]}],["$","td",null,{"children":"Create a lightweight tag pointing at current commit."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git push --tags"}]}],["$","td",null,{"children":"Push local tags to the remote."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"git gc"}]}],["$","td",null,{"children":"Run garbage collection to optimize repository storage (housekeeping)."}]]}]]}]]}]
2f:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
2b:null
2d:{"metadata":[["$","title","0",{"children":"Git Tools"}],["$","meta","1",{"name":"description","content":"Notes on using Git tools"}]],"error":null,"digest":"$undefined"}
32:"$2d:metadata"
