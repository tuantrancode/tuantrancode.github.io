1:"$Sreact.fragment"
2:I[79520,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/9c6d2480abf0de67.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],""]
3:I[35974,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/9c6d2480abf0de67.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"ThemeProvider"]
4:I[20908,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/9c6d2480abf0de67.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
5:I[39756,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/9c6d2480abf0de67.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
6:I[37457,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/9c6d2480abf0de67.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
1a:I[68027,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/9c6d2480abf0de67.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
:HL["/_next/static/chunks/152b8b3f0ab272fa.css","style"]
0:{"P":null,"b":"NF1AOyFV9KREHxExAhS1g","p":"","c":["","Cpp","cpp-methods"],"i":false,"f":[[["",{"children":["Cpp",{"children":["cpp-methods",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/152b8b3f0ab272fa.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/f3af76091b908de4.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/9c6d2480abf0de67.js","async":true,"nonce":"$undefined"}],["$","script","script-2",{"src":"/_next/static/chunks/7dd66bdf8a7e5707.js","async":true,"nonce":"$undefined"}]],["$","html",null,{"lang":"en","data-theme":"dark","children":[["$","head",null,{"children":[["$","style",null,{"children":"\n        "}],["$","$L2",null,{"id":"theme-script","strategy":"beforeInteractive","children":"\n            (function() {\n              const theme = localStorage.getItem('data-theme') || 'dark';\n              document.documentElement.dataset.theme = theme;\n              document.documentElement.setAttribute('data-theme', theme);\n            })();\n          "}]]}],["$","body",null,{"id":"root","children":["$","$L3",null,{"children":["$","$L4",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]]}]]}],{"children":["Cpp",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["cpp-methods",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"vector-methods","children":"Vector (<vector>) Methods"}],["$","h4",null,{"className":"sub-section-header","children":"Common Methods"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","b",null,{"children":"begin()"}],": Returns iterator to the first element.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"iterator begin()"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"end()"}],": Returns iterator to the past-the-end element.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"iterator end()"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"push_back()"}],": Appends an element to the end.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void push_back(const T& value)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"pop_back()"}],": Removes the last element.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void pop_back()"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"insert()"}],": Inserts element before pos.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"iterator insert(iterator pos, const T& value)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"erase()"}],": Removes element(s) from vector.",["$","ul",null,{"children":[["$","li",null,{"children":["$","code",null,{"children":"iterator erase(iterator pos)"}]}],["$","li",null,{"children":"$L7"}]]}]]}],"$L8","$L9","$La","$Lb"]}],"$Lc","$Ld"]}],"$Le","$Lf","$L10","$L11","$L12","$L13","$L14","$L15","$L16","$L17"],null,"$L18"]}],{},null,false]},null,false]},null,false]},null,false],"$L19",false]],"m":"$undefined","G":["$1a",["$L1b"]],"s":false,"S":true}
23:I[97367,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/9c6d2480abf0de67.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"OutletBoundary"]
25:I[11533,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/9c6d2480abf0de67.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"AsyncMetadataOutlet"]
27:I[97367,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/9c6d2480abf0de67.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"ViewportBoundary"]
29:I[97367,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/9c6d2480abf0de67.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"MetadataBoundary"]
2a:"$Sreact.suspense"
7:["$","code",null,{"children":"iterator erase(iterator first, iterator last)"}]
8:["$","li",null,{"children":[["$","b",null,{"children":"clear()"}],": Removes all elements.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void clear()"}]}]}]]}]
9:["$","li",null,{"children":[["$","b",null,{"children":"size()"}],": Returns number of elements.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"size_t size()"}]}]}]]}]
a:["$","li",null,{"children":[["$","b",null,{"children":"empty()"}],": Checks if vector is empty.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"bool empty()"}]}]}]]}]
b:["$","li",null,{"children":[["$","b",null,{"children":"at()"}],": Accesses element with bounds checking.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"T& at(size_t pos)"}]}]}]]}]
1c:T480,#include <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vector</span><span class="token punctuation">></span></span><span class="token plain-text">
#include </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iostream</span><span class="token punctuation">></span></span><span class="token plain-text">
using namespace std;

int main() </span><span class="token punctuation">{</span>
    vector<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>int</span><span class="token punctuation">></span></span><span class="token plain-text"> v = </span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token plain-text">;
    v.push_back(4);
    v.insert(v.begin() + 1, 10);
    v.erase(v.begin());

    for (auto it = v.begin(); it != v.end(); ++it)
        cout &lt;&lt; *it &lt;&lt; " ";
}</span>c:["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$1c"}}]}]
d:["$","hr",null,{}]
1d:T4af,#include <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span><span class="token plain-text">
#include </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iostream</span><span class="token punctuation">></span></span><span class="token plain-text">
using namespace std;

int main() </span><span class="token punctuation">{</span>
    string s <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>e:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"string-methods","children":"String (<string>) Methods"}],["$","h4",null,{"className":"sub-section-header","children":"Common Methods"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","b",null,{"children":"length()"}],": Returns string length.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"size_t length()"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"size()"}],": Same as ",["$","code",null,{"children":"length()"}],".",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"size_t size()"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"substr()"}],": Returns substring.",["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"string substr(size_t pos, size_t count = npos)"}]," ",["$","i",null,{"children":"(count optional)"}]]}],["$","li",null,{"children":[["$","code",null,{"children":"count"}]," is the length of the substring, or it defaults to the end of the string"]}]]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"find()"}],": Finds substring.",["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"size_t find(const string& str, size_t pos = 0)"}]," ",["$","i",null,{"children":"(pos optional)"}]]}],["$","li",null,{"children":[["$","code",null,{"children":"pos"}]," is the starting position in the string where the search begins"]}]]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"replace()"}],": Replaces portion of string.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"string& replace(size_t pos, size_t len, const string& str)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"append()"}],": Appends string.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"string& append(const string& str)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"insert()"}],": Inserts string at pos.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"string& insert(size_t pos, const string& str)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"erase()"}],": Erases portion.",["$","ul",null,{"children":["$","li",null,{"children":[["$","code",null,{"children":"string& erase(size_t pos = 0, size_t len = npos)"}]," ",["$","i",null,{"children":"(pos & len optional)"}]]}]}]]}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$1d"}}]}],["$","hr",null,{}]]}]
f:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"map-methods","children":"Map (<map>) Methods"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","b",null,{"children":"insert()"}],": Inserts key-value pair.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":["pair","<iterator, bool"," insert(const value_type& val)"]}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"erase()"}],": Removes element(s).",["$","ul",null,{"children":[["$","li",null,{"children":["$","code",null,{"children":"size_t erase(const key_type& key)"}]}],["$","li",null,{"children":["$","code",null,{"children":"iterator erase(iterator pos)"}]}]]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"find()"}],": Finds element by key.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"iterator find(const key_type& key)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"count()"}],": Returns number of elements with key.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"size_t count(const key_type& key)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"clear()"}],": Removes all elements.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void clear()"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"size()"}],": Returns number of elements.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"size_t size()"}]}]}]]}]]}],["$","hr",null,{}]]}]
10:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"set-methods","children":"Set (<set>) Methods"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","b",null,{"children":"insert()"}],": Inserts value.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":["pair","<iterator, bool>"," insert(const value_type& val)"]}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"erase()"}],": Removes element(s).",["$","ul",null,{"children":[["$","li",null,{"children":["$","code",null,{"children":"size_t erase(const key_type& key)"}]}],["$","li",null,{"children":["$","code",null,{"children":"iterator erase(iterator pos)"}]}]]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"find()"}],": Finds value.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"iterator find(const key_type& key)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"count()"}],": Checks existence.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"size_t count(const key_type& key)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"clear()"}],": Removes all elements.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void clear()"}]}]}]]}]]}],["$","hr",null,{}]]}]
11:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"algorithm-methods","children":"Algorithm (<algorithm>) Methods"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","b",null,{"children":"sort()"}],": Sorts range.",["$","ul",null,{"children":["$","li",null,{"children":[["$","code",null,{"children":["void sort(RandomIt first, RandomIt last, Compare comp = ",")"]}]," ",["$","i",null,{"children":"(comp optional)"}]]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"reverse()"}],": Reverses range.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void reverse(BidirectionalIt first, BidirectionalIt last)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"find()"}],": Finds value.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"InputIt find(InputIt first, InputIt last, const T& value)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"count()"}],": Counts occurrences.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"size_t count(InputIt first, InputIt last, const T& value)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"max_element()"}],": Finds max.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"ForwardIt max_element(ForwardIt first, ForwardIt last)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"min_element()"}],": Finds min.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"ForwardIt min_element(ForwardIt first, ForwardIt last)"}]}]}]]}]]}],["$","hr",null,{}]]}]
12:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"stack-methods","children":"Stack (<stack>) Methods"}],["$","h4",null,{"className":"sub-section-header","children":"Common Methods"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","b",null,{"children":"push()"}],": Inserts an element at the top.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void push(const T& value)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"pop()"}],": Removes the top element.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void pop()"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"top()"}],": Accesses the top element.",["$","ul",null,{"children":[["$","li",null,{"children":["$","code",null,{"children":"T& top()"}]}],["$","li",null,{"children":[["$","code",null,{"children":"const T& top() const"}]," : for const stack, returns a read-only access to the top element"]}]]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"empty()"}],": Checks if stack is empty.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"bool empty()"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"size()"}],": Returns the number of elements.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"size_t size()"}]}]}]]}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"#include <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iostream</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n#include </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stack</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\nusing namespace std;\n\n\nint main() </span><span class=\"token punctuation\">{</span>\nstack<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>int</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> st;\nst.push(10);\nst.push(20);\ncout &lt;&lt; \"Top: \" &lt;&lt; st.top() &lt;&lt; endl; // 20\nst.pop();\ncout &lt;&lt; \"New Top: \" &lt;&lt; st.top() &lt;&lt; endl; // 10\nreturn 0;\n}</span>"}}]}],["$","hr",null,{}]]}]
13:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"queue-methods","children":"Queue (<queue>) Methods"}],["$","h4",null,{"className":"sub-section-header","children":"Common Methods"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","b",null,{"children":"push()"}],": Inserts an element at the back.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void push(const T& value)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"pop()"}],": Removes the front element.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void pop()"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"front()"}],": Accesses the first element.",["$","ul",null,{"children":[["$","li",null,{"children":["$","code",null,{"children":"T& front()"}]}],["$","li",null,{"children":[["$","code",null,{"children":"const T& front() const"}]," : for const queue, returns a read-only access to the front element"]}]]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"back()"}],": Accesses the last element.",["$","ul",null,{"children":[["$","li",null,{"children":["$","code",null,{"children":"T& back()"}]}],["$","li",null,{"children":[["$","code",null,{"children":"const T& back() const"}]," : for const queue, returns a read-only access to the back element"]}]]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"empty()"}],": Checks if queue is empty.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"bool empty()"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"size()"}],": Returns the number of elements.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"size_t size()"}]}]}]]}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"#include <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iostream</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n#include </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>queue</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\nusing namespace std;\n\n\nint main() </span><span class=\"token punctuation\">{</span>\nqueue<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>int</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> q;\nq.push(1);\nq.push(2);\nq.push(3);\ncout &lt;&lt; \"Front: \" &lt;&lt; q.front() &lt;&lt; endl; // 1\ncout &lt;&lt; \"Back: \" &lt;&lt; q.back() &lt;&lt; endl; // 3\nq.pop();\ncout &lt;&lt; \"New Front: \" &lt;&lt; q.front() &lt;&lt; endl; // 2\nreturn 0;\n}</span>"}}]}],["$","hr",null,{}]]}]
1e:T6c9,#include <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iostream</span><span class="token punctuation">></span></span><span class="token plain-text">
#include </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cmath</span><span class="token punctuation">></span></span><span class="token plain-text">
using namespace std;

int main() </span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">// 5</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 8</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">2.9</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 2</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>14:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"math-functions","children":"Math (<cmath>) Functions"}],["$","h4",null,{"className":"sub-section-header","children":"Common Functions"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","b",null,{"children":"sqrt()"}],": Returns square root.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"double sqrt(double x)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"pow()"}],": Raises base to power exp.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"double pow(double base, double exp)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"abs()"}],": Returns absolute value.",["$","ul",null,{"children":[["$","li",null,{"children":["$","code",null,{"children":"int abs(int x)"}]}],["$","li",null,{"children":["$","code",null,{"children":"double fabs(double x)"}]}]]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"ceil()"}],": Rounds up.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"double ceil(double x)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"floor()"}],": Rounds down.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"double floor(double x)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"round()"}],": Rounds to nearest integer.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"double round(double x)"}]}]}]]}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$1e"}}]}],["$","hr",null,{}]]}]
1f:T74e,#include <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iostream</span><span class="token punctuation">></span></span><span class="token plain-text">
#include </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cstdlib</span><span class="token punctuation">></span></span><span class="token plain-text">
using namespace std;

int main() </span><span class="token punctuation">{</span>
    int<span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token function">sizeof</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    int<span class="token operator">*</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>15:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"memory-management","children":"Memory Management (<cstdlib> / new & delete)"}],["$","h4",null,{"className":"sub-section-header","children":"C-style Functions"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","b",null,{"children":"malloc()"}],": Allocates memory.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void* malloc(size_t size)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"calloc()"}],": Allocates zero-initialized memory.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void* calloc(size_t num, size_t size)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"realloc()"}],": Resizes allocated memory.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void* realloc(void* ptr, size_t size)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"free()"}],": Frees allocated memory.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void free(void* ptr)"}]}]}]]}]]}],["$","h4",null,{"className":"sub-section-header","children":"C++-style Operators"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","b",null,{"children":"new"}],": Allocates memory.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"int* ptr = new int;"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"delete"}],": Frees allocated memory.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"delete ptr;"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"new[]"}],": Allocates array.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"int* arr = new int[5];"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"delete[]"}],": Frees allocated array.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"delete[] arr;"}]}]}]]}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$1f"}}]}],"$L20"]}]
21:T818,#include <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iostream</span><span class="token punctuation">></span></span><span class="token plain-text">
#include </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cstdlib</span><span class="token punctuation">></span></span><span class="token plain-text">
#include </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ctime</span><span class="token punctuation">></span></span><span class="token plain-text">
using namespace std;

int main() </span><span class="token punctuation">{</span>
    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token comment">// Random 0-99</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>16:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"random-numbers","children":"Random Numbers (<cstdlib> / <ctime>)"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","b",null,{"children":"rand()"}],": Returns random integer.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"int rand()"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"srand()"}],": Seeds random generator.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"void srand(unsigned int seed)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"time()"}],": Returns current time.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"time_t time(time_t* arg)"}]}]}]]}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$21"}}]}],["$","hr",null,{}]]}]
22:T637,#include <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iostream</span><span class="token punctuation">></span></span><span class="token plain-text">
#include </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cctype</span><span class="token punctuation">></span></span><span class="token plain-text">
using namespace std;

int main() </span><span class="token punctuation">{</span>
    char c <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isupper</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Uppercase"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token function">tolower</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 'a'</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>17:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"character-classification","children":"Character Classification (<cctype>)"}],["$","h4",null,{"className":"sub-section-header","children":"Common Functions"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","b",null,{"children":"isalpha()"}],": Checks if character is a letter.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"int isalpha(int c)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"isdigit()"}],": Checks if character is a digit.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"int isdigit(int c)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"isalnum()"}],": Checks if alphanumeric.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"int isalnum(int c)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"isspace()"}],": Checks if whitespace.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"int isspace(int c)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"islower()"}],": Checks if lowercase.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"int islower(int c)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"isupper()"}],": Checks if uppercase.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"int isupper(int c)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"tolower()"}],": Converts to lowercase.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"int tolower(int c)"}]}]}]]}],["$","li",null,{"children":[["$","b",null,{"children":"toupper()"}],": Converts to uppercase.",["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"int toupper(int c)"}]}]}]]}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$22"}}]}]]}]
18:["$","$L23",null,{"children":["$L24",["$","$L25",null,{"promise":"$@26"}]]}]
19:["$","$1","h",{"children":[null,[["$","$L27",null,{"children":"$L28"}],null],["$","$L29",null,{"children":["$","div",null,{"hidden":true,"children":["$","$2a",null,{"fallback":null,"children":"$L2b"}]}]}]]}]
1b:["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/152b8b3f0ab272fa.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]
20:["$","hr",null,{}]
28:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
24:null
26:{"metadata":[["$","title","0",{"children":"C++ Methods Reference"}],["$","meta","1",{"name":"description","content":"Reference page for various methods in C++"}]],"error":null,"digest":"$undefined"}
2b:"$26:metadata"
