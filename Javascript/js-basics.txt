1:"$Sreact.fragment"
2:I[79520,["/_next/static/chunks/19df48d0b28bc07f.js","/_next/static/chunks/634e1e2133a61606.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],""]
3:I[35974,["/_next/static/chunks/19df48d0b28bc07f.js","/_next/static/chunks/634e1e2133a61606.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"ThemeProvider"]
4:I[20908,["/_next/static/chunks/19df48d0b28bc07f.js","/_next/static/chunks/634e1e2133a61606.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
5:I[39756,["/_next/static/chunks/19df48d0b28bc07f.js","/_next/static/chunks/634e1e2133a61606.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
6:I[37457,["/_next/static/chunks/19df48d0b28bc07f.js","/_next/static/chunks/634e1e2133a61606.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
1a:I[68027,["/_next/static/chunks/19df48d0b28bc07f.js","/_next/static/chunks/634e1e2133a61606.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
:HL["/_next/static/chunks/64fb0e62d66091d5.css","style"]
0:{"P":null,"b":"Mb4ok0VnbUKHLcgRDxr7X","p":"","c":["","Javascript","js-basics"],"i":false,"f":[[["",{"children":["Javascript",{"children":["js-basics",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/64fb0e62d66091d5.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/19df48d0b28bc07f.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/634e1e2133a61606.js","async":true,"nonce":"$undefined"}],["$","script","script-2",{"src":"/_next/static/chunks/7dd66bdf8a7e5707.js","async":true,"nonce":"$undefined"}]],["$","html",null,{"lang":"en","data-theme":"dark","children":[["$","head",null,{"children":["$","$L2",null,{"id":"theme-script","strategy":"beforeInteractive","children":"\n            (function() {\n              const theme = localStorage.getItem('data-theme') || 'dark';\n              document.documentElement.setAttribute('data-theme', theme);\n            })();\n          "}]}],["$","body",null,{"id":"root","children":["$","$L3",null,{"children":["$","$L4",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]]}]]}],{"children":["Javascript",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["js-basics",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"jsFiddle","children":"JS Fiddle"}],["$","p",null,{"children":[["$","a",null,{"href":"https://jsfiddle.net/","target":"_blank","children":"JS Fiddle"}]," is a useful site to test out HTML, CSS, and Javascript snippets."]}],["$","hr",null,{}]]}],["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"backtick","children":"Backtick & String"}],["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">const</span> embeddedExpression <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Current Year: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>"}}]}],"$L7","$L8"]}],"$L9","$La","$Lb","$Lc","$Ld","$Le","$Lf","$L10","$L11","$L12","$L13","$L14","$L15","$L16","$L17"],null,"$L18"]}],{},null,false]},null,false]},null,false]},null,false],"$L19",false]],"m":"$undefined","G":["$1a",["$L1b"]],"s":false,"S":true}
2e:I[22016,["/_next/static/chunks/19df48d0b28bc07f.js","/_next/static/chunks/634e1e2133a61606.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
37:I[97367,["/_next/static/chunks/19df48d0b28bc07f.js","/_next/static/chunks/634e1e2133a61606.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"OutletBoundary"]
39:I[11533,["/_next/static/chunks/19df48d0b28bc07f.js","/_next/static/chunks/634e1e2133a61606.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"AsyncMetadataOutlet"]
3b:I[97367,["/_next/static/chunks/19df48d0b28bc07f.js","/_next/static/chunks/634e1e2133a61606.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"ViewportBoundary"]
3d:I[97367,["/_next/static/chunks/19df48d0b28bc07f.js","/_next/static/chunks/634e1e2133a61606.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"MetadataBoundary"]
3e:"$Sreact.suspense"
7:["$","ul",null,{"children":["$","li",null,{"children":["Use backticks ",["$","code",null,{"children":"`"}]," in order to create a ",["$","strong",null,{"children":"template literal"}]," string - string in Javascript that spans multiple lines and uses embedded expression ( i.e. ${variableName} )"]}]}]
8:["$","hr",null,{}]
9:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"comment","children":"Comments"}],["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"<span class=\"token comment\">// This line is a comment</span>\n\n<span class=\"token comment\">/*\nThis block is also a comment\n*/</span>"}}]}],["$","hr",null,{}]]}]
1c:T4e7,<mark>console<span class="token punctuation">.</span>log</mark>><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">{</span>
   <span class="token comment">// do something</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <mark>console<span class="token punctuation">.</span>error</mark>><span class="token punctuation">(</span><span class="token string">"Do something failed: "</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Do something finished!"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>a:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"consoleLog","children":"Console Log"}],["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"$1c"}}]}],["$","hr",null,{}]]}]
b:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"variables","children":"Variables"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"const"}],": declare constant; can&pos;t be reassign"]}],["$","li",null,{"children":[["$","code",null,{"children":"let"}],": declare declare block-scoped variables"]}],["$","li",null,{"children":[["$","code",null,{"children":"var"}],": avoid in modern code; delcare function-scoped variables (accessible even behond",["$","code",null,{"children":"if"}]," and ",["$","code",null,{"children":"for"}]," loops statements)"]}],["$","li",null,{"children":[["$","code",null,{"children":"$${variableName}"}],": allow for clean injecting of Javascript variables/ expressions into the middle of string without having to ",["$","code",null,{"children":"variableName + 'string literal'"}]]}],["$","ul",null,{"children":["$","li",null,{"children":"Only usuable in a String"}]}]]}],["$","hr",null,{}]]}]
1d:Tefd,<span class="token comment">// Numbers</span>
<span class="token keyword">typeof</span> <span class="token number">NaN</span> <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">;</span> <span class="token comment">// Despite being "Not-A-Number"</span>
<span class="token keyword">typeof</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"shoe"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">;</span> <span class="token comment">// Number tries to parse things into numbers</span>

<span class="token comment">// Strings</span>
<span class="token keyword">typeof</span> <span class="token keyword">typeof</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">;</span> <span class="token comment">// typeof always returns a string</span>
<span class="token keyword">typeof</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">;</span> <span class="token comment">// String converts anything into a string, safer than toString</span>

<span class="token comment">// Booleans</span>
<span class="token keyword">typeof</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"boolean"</span><span class="token punctuation">;</span> <span class="token comment">// Boolean() will convert values based on if they're truthy or falsy</span>
<span class="token keyword">typeof</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token string">"boolean"</span><span class="token punctuation">;</span> <span class="token comment">// two calls of the ! (logical NOT) operator are equivalent to Boolean()</span>

<span class="token comment">// Objects</span>
<span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">;</span> <span class="token comment">// null is also treated as false and 0;</span>

<span class="token comment">// Avoid</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">;</span>c:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"types","children":"Variable Types"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"string"}],": &pos;hello&pos;"]}],["$","li",null,{"children":[["$","code",null,{"children":"number"}],": 5"]}],["$","li",null,{"children":[["$","code",null,{"children":"boolean"}],": true"]}],["$","li",null,{"children":[["$","code",null,{"children":"object"}],": { key: value }, [1, 2, 3], /regex/, new Date()"]}],["$","li",null,{"children":[["$","code",null,{"children":"function"}],": function () ",", class MyClass "]}],["$","li",null,{"children":[["$","code",null,{"children":"bigint"}],": 9007199254740992"]}],["$","ul",null,{"children":["$","li",null,{"children":[["$","code",null,{"children":"MAX_SAFE_NUMBER"}]," = 9007199254740991"]}]}],["$","li",null,{"children":[["$","code",null,{"children":"symbol"}],": ",["$","code",null,{"children":"Symbol(x)"}]]}],["$","li",null,{"children":[["$","code",null,{"children":"undefined"}],": a variable that has not been assigned a value"]}]]}],["$","h4",null,{"className":"sub-section-header","children":"Unconventional Cases"}],["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"$1d"}}]}],"$L1e","$L1f","$L20"]}]
d:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"dataStructures","children":"Data Structures"}],["$","table",null,{"className":"datastructures-table","children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"Feature"}],["$","th",null,{"children":"Array"}],["$","th",null,{"children":"Object"}],["$","th",null,{"children":"Set"}],["$","th",null,{"children":"Map"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":["$","strong",null,{"children":"Type of keys:"}]}],["$","td",null,{"children":"Numeric indexes (0,1,2...)"}],["$","td",null,{"children":"Strings or Symbols"}],["$","td",null,{"children":"Values only (no keys)"}],["$","td",null,{"children":"Any value (objects, functions, primitives)"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","strong",null,{"children":"Allows duplicate values:"}]}],["$","td",null,{"children":"Yes"}],["$","td",null,{"children":"N/A (keys must be unique)"}],["$","td",null,{"children":"No (all values are unique)"}],["$","td",null,{"children":"Keys unique, values can duplicate"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","strong",null,{"children":"Order guaranteed:"}]}],["$","td",null,{"children":"Yes (insertion order)"}],["$","td",null,{"children":"No (property order is mostly insertion-based but not reliable for all cases)"}],["$","td",null,{"children":"Yes (insertion order)"}],["$","td",null,{"children":"Yes (insertion order)"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","strong",null,{"children":"Iteration support:"}]}],["$","td",null,{"children":["$","code",null,{"children":"for, for...of, forEach, map, filter, reduce"}]}],["$","td",null,{"children":["$","code",null,{"children":"for...in, Object.keys/values/entries"}]}],["$","td",null,{"children":["$","code",null,{"children":"for...of, forEach"}]}],["$","td",null,{"children":["$","code",null,{"children":"for...of, forEach"}]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","strong",null,{"children":"Primary use case:"}]}],["$","td",null,{"children":"Ordered list of values"}],["$","td",null,{"children":"Key-value pairs, fast property lookup"}],["$","td",null,{"children":"Unique values collection"}],["$","td",null,{"children":"Key-value pairs with any key type"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","strong",null,{"children":"Performance for lookups:"}]}],["$","td",null,{"children":"O(1) by index"}],["$","td",null,{"children":"O(1) by key (hash map under the hood)"}],["$","td",null,{"children":"O(1) for presence checks"}],["$","td",null,{"children":"O(1) for presence checks"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","strong",null,{"children":"Common methods:"}]}],["$","td",null,{"children":["$","code",null,{"children":"push, pop, map, filter, reduce"}]}],["$","td",null,{"children":["$","code",null,{"children":"Object.keys, Object.values, hasOwnProperty"}]}],["$","td",null,{"children":["$","code",null,{"children":"add, delete, has, clear"}]}],["$","td",null,{"children":["$","code",null,{"children":"set, get, has, delete, clear"}]}]]}]]}]]}],["$","h4",null,{"className":"sub-section-header","children":"Notes"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"Array"}]," is best for ordered lists and sequential data."]}],["$","li",null,{"children":[["$","code",null,{"children":"Object"}]," is the traditional key-value structure, but keys are limited to strings/symbols."]}],["$","li",null,{"children":[["$","code",null,{"children":"Set"}]," ensures uniqueness, useful for deduplication."]}],["$","li",null,{"children":[["$","code",null,{"children":"Map"}]," is more flexible than objects since keys can be any type."]}]]}],["$","hr",null,{}]]}]
e:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"operators","children":"Operators"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"%"}],": modulo (remainder)"]}],["$","li",null,{"children":[["$","code",null,{"children":"**"}],": exponentiation"]}],["$","li",null,{"children":[["$","code",null,{"children":"++"}],": increment"]}],["$","li",null,{"children":[["$","code",null,{"children":"--"}],": decrement"]}],["$","li",null,{"children":[["$","code",null,{"children":"=="}],": equality (type conversion allowed)"]}],["$","li",null,{"children":[["$","code",null,{"children":"==="}],": strict equality (no type conversion)"]}],["$","li",null,{"children":[["$","code",null,{"children":"!="}],": inequality"]}],["$","li",null,{"children":[["$","code",null,{"children":"!=="}],": strict inequality"]}],["$","li",null,{"children":[["$","code",null,{"children":"&&"}],": logical AND"]}],["$","li",null,{"children":[["$","code",null,{"children":"||"}],": logical OR"]}],["$","li",null,{"children":[["$","code",null,{"children":"??"}],": nullish coalescing (returns right side only if left is null/undefined)"]}]]}],["$","hr",null,{}]]}]
21:Tcca,<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token comment">// if / else</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Greater than 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Less than or equal to 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ternary operator</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> value <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token string">"Big"</span> <span class="token operator">:</span> <span class="token string">"Small"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// switch statement</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"One"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Five"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Unknown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>f:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"conditionals","children":"Conditionals"}],["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"$21"}}]}],"$L22"]}]
10:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"truthyFalsy","children":"Truthy & Falsy"}],["$","table",null,{"children":[["$","caption",null,{"children":["$","strong",null,{"children":"JavaScript Truthy vs Falsy Values"}]}],["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"Value / Example"}],["$","th",null,{"children":"Type"}],["$","th",null,{"children":"Boolean Result"}],["$","th",null,{"children":"Notes"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":[["$","code",null,{"children":"0"}],", ",["$","code",null,{"children":"-0"}]]}],["$","td",null,{"children":"Number"}],["$","td",null,{"children":"Falsy"}],["$","td",null,{"children":"Zero values are falsy."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"0n"}]}],["$","td",null,{"children":"BigInt"}],["$","td",null,{"children":"Falsy"}],["$","td",null,{"children":"BigInt zero is falsy."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"NaN"}]}],["$","td",null,{"children":"Number"}],["$","td",null,{"children":"Falsy"}],["$","td",null,{"children":"Result of invalid numeric ops."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"\"\""}]}],["$","td",null,{"children":"String"}],["$","td",null,{"children":"Falsy"}],["$","td",null,{"children":"Empty string only."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"null"}]}],["$","td",null,{"children":"Null"}],["$","td",null,{"children":"Falsy"}],["$","td",null,{"children":"Intentional “no value”."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"undefined"}]}],["$","td",null,{"children":"Undefined"}],["$","td",null,{"children":"Falsy"}],["$","td",null,{"children":"Uninitialized / missing value."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["Non-zero numbers (e.g., ",["$","code",null,{"children":"1"}],", ",["$","code",null,{"children":"-1"}],", ",["$","code",null,{"children":"Infinity"}],")"]}],["$","td",null,{"children":"Number"}],["$","td",null,{"children":"Truthy"}],["$","td",null,{"children":"All non-zero numbers are truthy."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["Non-empty strings (e.g., ",["$","code",null,{"children":"\"0\""}],", ",["$","code",null,{"children":"\"false\""}],", ",["$","code",null,{"children":"\" \""}],")"]}],["$","td",null,{"children":"String"}],["$","td",null,{"children":"Truthy"}],["$","td",null,{"children":["Even ",["$","em",null,{"children":"\"0\""}]," and ",["$","em",null,{"children":"\"false\""}]," are truthy."]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"{}"}]}],["$","td",null,{"children":"Object"}],["$","td",null,{"children":"Truthy"}],["$","td",null,{"children":"Empty object is truthy."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"[]"}]}],["$","td",null,{"children":"Array"}],["$","td",null,{"children":"Truthy"}],["$","td",null,{"children":"Empty array is truthy."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"function() "}]}],["$","td",null,{"children":"Function"}],["$","td",null,{"children":"Truthy"}],["$","td",null,{"children":"All functions are truthy."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"Symbol()"}]}],["$","td",null,{"children":"Symbol"}],["$","td",null,{"children":"Truthy"}],["$","td",null,{"children":"All symbols are truthy."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["Non-zero BigInt (e.g., ",["$","code",null,{"children":"1n"}],", ",["$","code",null,{"children":"-5n"}],")"]}],["$","td",null,{"children":"BigInt"}],["$","td",null,{"children":"Truthy"}],["$","td",null,{"children":["Any BigInt except ",["$","code",null,{"children":"0n"}],"."]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["Objects like ",["$","code",null,{"children":"new Date()"}],", ",["$","code",null,{"children":"new Map()"}],", ",["$","code",null,{"children":"new Set()"}]]}],["$","td",null,{"children":"Object"}],["$","td",null,{"children":"Truthy"}],["$","td",null,{"children":"Empty Map/Set are still truthy."}]]}]]}]]}],["$","hr",null,{}]]}]
23:T11dc,<span class="token comment">// for loop</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// while loop</span>
<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// do...while loop</span>
<span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
  j<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// for...of loop (arrays)</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> num <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// for...in loop (objects)</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>11:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"loops","children":"Loops"}],["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"$23"}}]}],"$L24"]}]
25:Tc69,<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> makes a sound</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> barks</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"Rex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dog<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Rex barks</span>12:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"classes","children":"Classes"}],["$","p",null,{"children":"Same as Java classes"}],["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"$25"}}]}],"$L26"]}]
27:T880,<span class="token comment">//In script2.js</span>
<mark><span class="token keyword">import</span> <span class="token punctuation">{</span>myFunction<span class="token punctuation">,</span> MyClass<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"script1.js"</span><span class="token punctuation">;</span></mark>>

<span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token comment">//In script1.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> myFunction<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span><span class="token punctuation">}</span>28:T6da,<span class="token comment">//In script2.js</span>
<mark><span class="token keyword">import</span> NewNameClass <span class="token keyword">from</span> <span class="token string">"script1.js"</span><span class="token punctuation">;</span></mark>>

<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewNameClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token comment">//In script1.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span><span class="token punctuation">}</span>13:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"importing","children":"Importing"}],["$","p",null,{"children":[" An alias can be used to replace really long names by using ",["$","code",null,{"children":"as"}]," (i.e.",["$","code",null,{"children":"import {reallyLongName as newName} from 'script.js' "}],")"]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"Named Import"}],": import any exported Javascript bindings (i.e. functions, variables/constants, classes, objects)"]}],["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"$27"}}]}],["$","li",null,{"children":[["$","strong",null,{"children":"Default Import"}],": import any exported default Javascript bindings"]}],["$","ul",null,{"children":["$","li",null,{"children":"Only one default can exist in each Javascript file"}]}],["$","ul",null,{"children":["$","li",null,{"children":"Any new alias can be given to the default"}]}],["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"$28"}}]}],"$L29","$L2a","$L2b","$L2c"]}],"$L2d"]}]
14:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"importingIntoHTML","children":"Importing into HTML"}],["$","p",null,{"children":["The section in ",["$","$L2e",null,{"href":"/#linkingJS","children":[" ",["$","strong",null,{"children":"HTML Basics"}]]}]," covered it."]}],["$","hr",null,{}]]}]
2f:T1b84,<span class="token comment">// JS</span>

<span class="token comment">// Destructuring array (order matter)</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> rest<span class="token punctuation">;</span>
<span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">;</span>   
<span class="token comment">// first = 1, second = 2, rest = [3, 4, 5]</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token comment">// Destructuring object (order does not matter, but need () )</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">prop1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">prop2</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">prop3</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token literal-property property">prop4</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
        <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span> 
        <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">,</span> 
        <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">12</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> prop1<span class="token punctuation">,</span> prop2<span class="token punctuation">,</span> prop3<span class="token punctuation">,</span> prop4<span class="token punctuation">,</span> rest<span class="token punctuation">,</span> a<span class="token punctuation">;</span>

<span class="token punctuation">(</span> <span class="token punctuation">{</span>prop1<span class="token punctuation">,</span> prop2<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token operator">=</span> obj <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// parenthesis around the whole statement to tell JS it's an object literal</span>
<span class="token comment">// prop1 = 1, prop2 = 2, rest = { prop3: 3,  prop4: { a:10, b:11, c:12} }</span>

<span class="token punctuation">(</span> <span class="token punctuation">{</span>prop3<span class="token punctuation">,</span> <span class="token literal-property property">prop4</span><span class="token operator">:</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> obj <span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">// prop3 = 3, prop4 = undefined, a = 10 </span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token comment">// Destructuring works well with function arguments</span>
<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> prop1 <span class="token operator">=</span> props<span class="token punctuation">.</span>prop1<span class="token punctuation">;</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span> <span class="token parameter"><span class="token punctuation">{</span>prop1<span class="token punctuation">}</span></span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>15:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"destructuring","children":"Destructuring Syntax"}],["$","p",null,{"children":"Destructuring syntax can be used on arrays and objects to simplify code by using shorthand to unpack values into distinct variables"}],["$","ul",null,{"children":[["$","li",null,{"children":"The values of an array can be unpacked into an array of distinct variables; likewise, the properties of an object can be unpacked into an object with the same number of dinstinct variables"}],["$","li",null,{"children":"When destructuring an array, the order of the distinct variables matter"}],["$","li",null,{"children":"When destructuring an object, only the name of the properties matter and not the order, but requires parenthesis around the whole statement"}],["$","li",null,{"children":"It's useful for destructuring function arguments"}]]}],["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"$2f"}}]}],"$L30"]}]
31:T741,<span class="token comment">// JS</span>

<span class="token comment">// Use for merging objects dynamically (i.e. updating an object field)</span>
<span class="token keyword">const</span> field <span class="token operator">=</span> <span class="token string">"email"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token string">"alice@example.com"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">"old@example.com"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Create a new object with updated field dynamically</span>
<span class="token keyword">const</span> updatedUser <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>user<span class="token punctuation">,</span>
  <span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token operator">:</span> value 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>updatedUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {name: 'Alice', email: 'alice@example.com' }</span>32:T83d,<span class="token comment">// JS</span>

<span class="token comment">// Use for building API payloads based on user input </span>
<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"sortBy"</span><span class="token punctuation">,</span> <span class="token string">"filter"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"date"</span><span class="token punctuation">,</span> <span class="token string">"active"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {sortBy: 'date', filter: 'active' }</span>16:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"computedProperty","children":"Computed Property Name"}],["$","p",null,{"children":["Normally, the keys of an object are literal, i.e. ",["$","code",null,{"children":"const obj = &123;key: 1 &125;;"}]," would have ",["$","code",null,{"children":"key"}]," itself as the key, but Computed Property Name allow Javascript to dynamically assign keys to object by replacing them with Javascript expressions. "]}],["$","ul",null,{"children":[["$","li",null,{"children":["In order to use the value of a variable or expression as an object's key, add brackets ",["$","code",null,{"children":"[]"}]," around it"]}],["$","ul",null,{"children":["$","li",null,{"children":["$","code",null,{"children":"const obj = &123;[expression]: value &125;;"}]}]}],["$","li",null,{"children":"This syntax can only be used on objects' keys"}],["$","li",null,{"children":"Useful in creating React forms or merging objects dynamically or when keys are not known until runtime"}]]}],["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"$31"}}]}],["$","br",null,{}],["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"$32"}}]}],"$L33","$L34","$L35"]}]
36:T275e,<span class="token comment">// Creating event handlers or callbacks</span>
<span class="token keyword">function</span> <span class="token function">clickLoggerFactory</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Clicked: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

button1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">clickLoggerFactory</span><span class="token punctuation">(</span><span class="token string">"button1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
button2<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">clickLoggerFactory</span><span class="token punctuation">(</span><span class="token string">"button2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token comment">// Configurating function parameters</span>
<span class="token keyword">function</span> <span class="token function">apiCallerFactory</span><span class="token punctuation">(</span><span class="token parameter">apiUrl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">endpoint</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>endpoint<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> githubAPI <span class="token operator">=</span> <span class="token function">apiCallerFactory</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">githubAPI</span><span class="token punctuation">(</span><span class="token string">"users/octocat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token comment">// Memoization</span>
<span class="token keyword">function</span> <span class="token function">memoAddFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> cache<span class="token punctuation">)</span><span class="token punctuation">)</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> addMemo <span class="token operator">=</span> <span class="token function">memoAddFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addMemo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addMemo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cached result: 5</span>17:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"funFactory","children":"Function Factory"}],["$","p",null,{"children":["$","code",null,{"children":"funFactory(row) => () => {return(row)} "}]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"funFactory"}]," will return a function ",["$","code",null,{"children":"() => {return(row)} "}]," that always return the value of ",["$","code",null,{"children":"row"}]]}],["$","li",null,{"children":["If ",["$","code",null,{"children":"row"}]," was an object, the reference will be saved by the factory; a copy or clone is needed to save the object's values"]}],["$","li",null,{"children":"Can be useful for creating handlers to functions, configurating their parameters, and memoization"}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$36"}}]}]]}]
18:["$","$L37",null,{"children":["$L38",["$","$L39",null,{"promise":"$@3a"}]]}]
19:["$","$1","h",{"children":[null,[["$","$L3b",null,{"children":"$L3c"}],null],["$","$L3d",null,{"children":["$","div",null,{"hidden":true,"children":["$","$3e",null,{"fallback":null,"children":"$L3f"}]}]}]]}]
1b:["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/64fb0e62d66091d5.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]
1e:["$","h4",null,{"className":"sub-section-header","children":"Notes"}]
1f:["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"typeof"}]," can be used to identify type"]}],["$","li",null,{"children":[["$","code",null,{"children":"instanceof"}]," can be used to check if object is sublcass of another"]}],["$","ul",null,{"children":["$","li",null,{"children":[["$","code",null,{"children":"instanceof Array"}]," : check if something is an array"]}]}]]}]
20:["$","hr",null,{}]
22:["$","hr",null,{}]
24:["$","hr",null,{}]
26:["$","hr",null,{}]
29:["$","li",null,{"children":[["$","strong",null,{"children":"Namespace Import"}],": import ALL exported Javascript bindings"]}]
40:T8af,<span class="token comment">//In script2.js</span>
<mark><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> myModule <span class="token keyword">from</span> <span class="token string">"script1.js"</span><span class="token punctuation">;</span></mark>>

myModule<span class="token punctuation">.</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myModule<span class="token punctuation">.</span>NewNameClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token comment">//In script1.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> myFunction<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span><span class="token punctuation">}</span>2a:["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"$40"}}]}]
2b:["$","li",null,{"children":[["$","strong",null,{"children":"Side Effect Import"}],": doesn't import anything, but instead run all the global code of the module"]}]
41:T62f,<span class="token comment">//In script2.js</span>
<mark><span class="token keyword">import</span> <span class="token string">"script1.js"</span><span class="token punctuation">;</span></mark>>

<span class="token comment">//myFunction is being run from the script2.js</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token comment">//In script1.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> myFunction<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>2c:["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"$41"}}]}]
2d:["$","hr",null,{}]
30:["$","hr",null,{}]
33:["$","br",null,{}]
42:T59f,<span class="token comment">// JS</span>

<span class="token comment">// Computed keys with expressions</span>
<span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token string">"item_"</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">"item_"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"banana"</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {item_1: 'apple', item_2: 'banana' }</span>34:["$","pre",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript","dangerouslySetInnerHTML":{"__html":"$42"}}]}]
35:["$","hr",null,{}]
3c:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
38:null
3a:{"metadata":[["$","title","0",{"children":"Javascript Basics"}],["$","meta","1",{"name":"description","content":"Basics concept of Javascript"}]],"error":null,"digest":"$undefined"}
3f:"$3a:metadata"
