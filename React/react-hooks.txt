1:"$Sreact.fragment"
2:I[79520,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],""]
3:I[35974,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"ThemeProvider"]
4:I[20908,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
5:I[39756,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
6:I[37457,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
15:I[68027,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
:HL["/_next/static/chunks/152b8b3f0ab272fa.css","style"]
0:{"P":null,"b":"Pbbjd1YdHXArHwg40nuYv","p":"","c":["","React","react-hooks"],"i":false,"f":[[["",{"children":["React",{"children":["react-hooks",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/152b8b3f0ab272fa.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/f3af76091b908de4.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/a4738764f77f4796.js","async":true,"nonce":"$undefined"}],["$","script","script-2",{"src":"/_next/static/chunks/7dd66bdf8a7e5707.js","async":true,"nonce":"$undefined"}]],["$","html",null,{"lang":"en","data-theme":"dark","children":[["$","head",null,{"children":[["$","style",null,{"children":"\n        "}],["$","$L2",null,{"id":"theme-script","strategy":"beforeInteractive","children":"\n            (function() {\n              const theme = localStorage.getItem('data-theme') || 'dark';\n              document.documentElement.dataset.theme = theme;\n              document.documentElement.setAttribute('data-theme', theme);\n            })();\n          "}]]}],["$","body",null,{"id":"root","children":["$","$L3",null,{"children":["$","$L4",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]]}]]}],{"children":["React",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["react-hooks",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"hooks","children":"Hooks"}],["$","p",null,{"children":"Hooks allow us to manage state, lifecycle methods, and other React features inside functional components."}],["$","p",null,{"children":["Some common hooks: ",["$","code",null,{"children":"useState, useEffect, useContext, useReducer, useRef, useMemo, useCallback"}]]}],["$","p",null,{"children":["$","strong",null,{"children":"Rules of Hooks"}]}],["$","ul",null,{"children":[["$","li",null,{"children":"Only call hooks at the top level (inside the main function body)"}],["$","ul",null,{"children":["$","li",null,{"children":"i.e., don't call hooks inside loops, conditions, or nested functions"}]}],["$","li",null,{"children":"Only call hooks in React functions (functional components and custom hooks)"}],["$","ul",null,{"children":[["$","li",null,{"children":"Functional components start with a capital letter"}],["$","li",null,{"children":"Custom hooks start with 'use', call other hooks, and return values, state, or logic (not JSX)"}]]}]]}],["$","hr",null,{}]]}],["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"useState","children":"State Hook"}],["$","p",null,{"children":["$","code",null,{"children":"[ current, setState ] = useState(initial)"}]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"useState"}]," : returns an array with the current state and a state setter"]}],"$L7","$L8","$L9","$La"]}],"$Lb","$Lc"]}],"$Ld","$Le","$Lf","$L10","$L11","$L12"],null,"$L13"]}],{},null,false]},null,false]},null,false]},null,false],"$L14",false]],"m":"$undefined","G":["$15",["$L16"]],"s":false,"S":true}
2b:I[97367,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"OutletBoundary"]
2d:I[11533,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"AsyncMetadataOutlet"]
2f:I[97367,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"ViewportBoundary"]
31:I[97367,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"MetadataBoundary"]
32:"$Sreact.suspense"
7:["$","li",null,{"children":[["$","code",null,{"children":"current"}]," : the current state value"]}]
8:["$","li",null,{"children":[["$","code",null,{"children":"setState(callbackFunc)"}]," : a function that we can use to update the value of the current state"]}]
9:["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"setState( (current) => {return newState} )"}]," : the ",["$","code",null,{"children":"callbackFunc"}]," always have the current state (or previous state) as a parameter and return the new state"]}],["$","li",null,{"children":["Always use a callback function in ",["$","code",null,{"children":"setState"}]," instead of using",["$","code",null,{"children":"setState(current + 1)"}]," because it can cause race condition"]}],["$","li",null,{"children":"React will always re-render the component (unless new state is the same as old) whenever the setter function is called"}],["$","ul",null,{"children":["$","li",null,{"children":"i.e. React will calls on the functional component again and re-render the whole component, so the whole function rerun except with different state values"}]}]]}]
a:["$","li",null,{"children":[["$","code",null,{"children":"initial"}]," : the initial value of the state (optional, but recommended to put an empty object, array, or ",["$","code",null,{"children":"null"}],", otherwise useState default to ",["$","code",null,{"children":"undefined"}],")"]}]
17:Tb8e,<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
      
      <span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. useState call</span>
        <mark><span class="token plain-text">const [count, setCount] = useState(0);</span></mark>
      
        <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
          <span class="token comment">// 2. Update state</span>
          <mark><span class="token plain-text">setCount(prev =&amp;gt; prev + 1);</span></mark>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
            // 3. Use state
            </span><mark><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></mark><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Increase</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>b:["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$17"}}]}]
c:["$","hr",null,{}]
18:T26b6,<span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
      
      <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">UsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">[</span>users<span class="token punctuation">,</span> setUsers<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span> setError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <mark><span class="token plain-text">useEffect(() =&amp;gt; </span><span class="token punctuation">{</span></mark>
          <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://jsonplaceholder.typicode.com/users"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">HTTP error! status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token function">setUsers</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
              <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token function">fetchUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <mark><span class="token plain-text">[]</span></mark><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Error: </span><span class="token punctuation">{</span>error<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
      
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span><span class="token plain-text">User List</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
              </span><span class="token punctuation">{</span>users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
                  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token plain-text"> — </span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>email<span class="token punctuation">}</span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
              <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>d:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"useEffect","children":"Effect Hook"}],["$","p",null,{"children":["$","code",null,{"children":"useEffect(callbackFunc, [dependencyArray])"}]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"callbackFunc"}]," returns a ",["$","code",null,{"children":"cleanup()"}]," function to be used before re-rendering and unmounting a component"]}],["$","li",null,{"children":["The 2nd argument takes a dependency array that tells ",["$","code",null,{"children":"useEffect"}]," to run only if any variable in the array changed, like ",["$","code",null,{"children":"[state]"}]]}],["$","ul",null,{"children":[["$","li",null,{"children":["Passing an empty dependency array ",["$","code",null,{"children":"[]"}]," tells ",["$","code",null,{"children":"useEffect"}]," to only run after the first render()"]}],["$","li",null,{"children":["General rule of thumb is to include any variables or functions from outer scope that ",["$","code",null,{"children":"useEffect"}]," used, like the setter of the context"]}]]}]]}],["$","p",null,{"children":[["$","code",null,{"children":"useEffect"}]," runs...  everytime AFTER the component finishes rendering by calling on the callback function, or effect"]}],["$","ul",null,{"children":[["$","li",null,{"children":"When the component is mounted."}],["$","li",null,{"children":"When any value in the dependency array changes, it runs the cleanup function and then the effect."}],["$","li",null,{"children":"It runs the cleanup function one last time before unmounting a component"}]]}],["$","p",null,{"children":["$","strong",null,{"children":"Uses of Effect Hook: "}]}],["$","ul",null,{"children":[["$","li",null,{"children":"Use to fetch data from back-end, subscribe to a stream of data, manage timers and intervals, read/edit DOM"}],["$","li",null,{"children":"There are 3 key moments in a component's lifecycle that can make use of the Effect Hook"}],["$","ul",null,{"children":[["$","li",null,{"children":"When component is first added/mounted to the DOM and renders"}],["$","ul",null,{"children":["$","li",null,{"children":["Only the body of the ",["$","code",null,{"children":"callbackFunc"}]," is run"]}]}],["$","li",null,{"children":"When it re-render due to state or props change"}],["$","ul",null,{"children":["$","li",null,{"children":["Both the body of the ",["$","code",null,{"children":"callbackFunc"}]," and ",["$","code",null,{"children":"cleanup"}]," function is run"]}]}],["$","li",null,{"children":"When it's removed/unmounted from the DOM"}],["$","ul",null,{"children":["$","li",null,{"children":["Only the ",["$","code",null,{"children":"cleanup"}]," function is run"]}]}]]}],["$","li",null,{"children":["Keep hooks separate based on their effect - i.e. one ",["$","code",null,{"children":"useEffect"}]," hook for setting up menu items and another ",["$","code",null,{"children":"useEffect"}]," for fetching data"]}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$18"}}]}],"$L19"]}]
1a:T84f,<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">function</span> <span class="token function">handleResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> handleResize<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
          window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> handleResize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>1b:T64e,<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> btn <span class="token operator">=</span> buttonRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e:["$","section",null,{"children":[["$","h4",null,{"className":"sub-section-header","children":"When Cleanup is Needed"}],["$","ul",null,{"children":[["$","li",null,{"children":["Event listeners on elements outside the component - ",["$","code",null,{"children":"window, document, body"}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$1a"}}]}],["$","li",null,{"children":["Adding listeners using ",["$","code",null,{"children":"ref"}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$1b"}}]}],"$L1c","$L1d","$L1e","$L1f","$L20","$L21"]}],"$L22"]}]
23:T16f1,<span class="token comment">// Preserving values between render</span>
      <span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
      
      <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PreviousValueTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <mark><span class="token plain-text">const prevCountRef = useRef();</span></mark>
      
        <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
          <mark><span class="token plain-text">prevCountRef.current = count;</span></mark>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span><span class="token plain-text">Current Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><mark><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">Previous Count: </span><span class="token punctuation">{</span>prevCountRef<span class="token punctuation">.</span>current<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></mark><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Decrement</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>f:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"useRef","children":"Reference Hook"}],["$","p",null,{"children":["$","code",null,{"children":"ref = useRef(initial)"}]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"ref"}]," : an object with a single property: ",["$","code",null,{"children":"current"}]," that will persist between re-render"]}],["$","li",null,{"children":[["$","code",null,{"children":"ref.current"}]," : use to access and update the value of the object"]}],["$","li",null,{"children":[["$","code",null,{"children":"initial"}]," : inital value of ",["$","code",null,{"children":"ref.current"}]]}],["$","li",null,{"children":[["$","code",null,{"children":"useRef"}]," will keep the reference if it's an object"]}],["$","li",null,{"children":[["$","code",null,{"children":"ref"}]," objects are removed on unmount"]}]]}],["$","p",null,{"children":"Used to access DOM elements or persist a value between re-render, updating persisting values between render without causing re-render "}],["$","ul",null,{"children":[["$","li",null,{"children":"Accessing DOM elements directly"}],["$","li",null,{"children":"Storing mutable values that don't trigger a re-render"}],["$","li",null,{"children":"Keeping previous values between re-render for comparison"}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$23"}}]}],"$L24","$L25","$L26"]}]
27:T24d0,<span class="token comment">// JSX</span>
      <span class="token comment">// ThemeContext.js</span>
      <span class="token comment">// 1. Create the ThemeContext and ThemeProvider</span>
      <span class="token string">"use client"</span><span class="token punctuation">;</span>
      <span class="token keyword">import</span> <span class="token punctuation">{</span>createContext<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
      
      <mark><span class="token plain-text">const ThemeContext = createContext();</span></mark>
      
      <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ThemeProvider</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>children<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">[</span>theme<span class="token punctuation">,</span> setTheme<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <mark><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> theme<span class="token punctuation">,</span> setTheme <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
                  </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeContext.Provider</span></span><span class="token punctuation">></span></span></mark>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      
      <mark><span class="token plain-text">export function useTheme() </span><span class="token punctuation">{</span></mark>
         <span class="token keyword">return</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
      <span class="token comment">// app/layout.js</span>
      <span class="token keyword">import</span> <span class="token punctuation">{</span>ThemeProvider<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'context/ThemeContext'</span><span class="token punctuation">;</span>
      
      <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">RootLayout</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>children<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
                // 2. Wrap children in the Provider
                </span><mark><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span></mark><span class="token plain-text">
                  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token plain-text">
          );
      }
      --------------------------------------------------------------
      / Child.js
      // Using the value
      import </span><span class="token punctuation">{</span>useTheme<span class="token punctuation">}</span><span class="token plain-text"> from 'context/ThemeContext';
      
      function Child()</span><span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span>theme<span class="token punctuation">,</span> setTheme<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
              <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTheme</span><span class="token punctuation">(</span>theme <span class="token operator">===</span> <span class="token string">"light"</span> <span class="token operator">?</span> <span class="token string">"dark"</span> <span class="token operator">:</span> <span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Toggle Theme
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>10:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"useContext","children":"Context Hook"}],["$","p",null,{"children":["React Context is another way to pass information to components and their children without using",["$","code",null,{"children":"props"}]]}],["$","ul",null,{"children":[["$","li",null,{"children":"Use React Context to give many components access to the same state"}],["$","li",null,{"children":["React Context also allow any component children component to get access without having to drill",["$","code",null,{"children":"props"}]," down to deeply nested children"]}]]}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$27"}}]}],"`","$L28"]}]
29:T169d,<span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
      
      <span class="token comment">// Child was memorized and won't re-render unless onFetch changes</span>
      <mark><span class="token plain-text">const Child = memo(({ onFetch }) => </span><span class="token punctuation">{</span></mark>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Child rendered"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onFetch<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Fetch Data</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token comment">// fetchData is a function and will be re-created on every render so the Child's prop will change with every render, causing infinite re-render unless a callback hook is used to memorize the fetchData </span>
        <mark><span class="token plain-text">const fetchData = useCallback(() => </span><span class="token punctuation">{</span></mark>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Fetching data..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><mark><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token attr-name">onFetch</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>fetchData<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span></mark><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>11:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"useMemoCallback","children":"Memo & Callback Hooks"}],["$","p",null,{"children":[["$","strong",null,{"children":"Memo Hook"}]," : optimizes expensive computations by caching results/values so it doesn't have to be recalculated on re-render"]}],["$","ul",null,{"children":["$","li",null,{"children":"Can be used to memoize a component so that it doesn't re-render unless props changed"}]}],["$","p",null,{"children":[["$","strong",null,{"children":"Callback Hook"}],": prevents unnecessary function re-creations; same as memo except for saving function"]}],["$","ul",null,{"children":["$","li",null,{"children":"Use cases: if the function is used as a dependency or if it's passed to memorized children"}]}],["$","p",null,{"children":"Useful for preventing the reference of an variable/function from changing if it's used in a dependency array"}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$29"}}]}],"$L2a"]}]
12:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"useReducer","children":"Reducer Hook"}],["$","p",null,{"children":"Advanced State Management - An alternative to useState when state logic is complex."}],["$","hr",null,{}]]}]
13:["$","$L2b",null,{"children":["$L2c",["$","$L2d",null,{"promise":"$@2e"}]]}]
14:["$","$1","h",{"children":[null,[["$","$L2f",null,{"children":"$L30"}],null],["$","$L31",null,{"children":["$","div",null,{"hidden":true,"children":["$","$32",null,{"fallback":null,"children":"$L33"}]}]}]]}]
16:["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/152b8b3f0ab272fa.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]
19:["$","hr",null,{}]
1c:["$","li",null,{"children":"Subscribing to data, websockets, or streaming APIs"}]
34:T7f2,<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"wss://example.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ws<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> event <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
          ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cleanup when component unmounts</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>1d:["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$34"}}]}]
1e:["$","li",null,{"children":["Timers ",["$","code",null,{"children":"setInterval"}]," and ",["$","code",null,{"children":"setTimeout"}]," must be cleaned up"]}]
35:T73c,<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Tick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>1f:["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$35"}}]}]
20:["$","li",null,{"children":"Initializing libraries inside useEffect (Chart.js, Leaflet, GSAP) requires cleanup"}]
36:T548,<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> chart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chart</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span> chart<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>21:["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$36"}}]}]
22:["$","hr",null,{}]
24:["$","br",null,{}]
37:T1020,<span class="token comment">// Saving ref of JSX elements/components to be used else where</span>
      <span class="token comment">// Passing the ref onto a sibling component or use it at parent</span>
      <span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> buttonRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
                  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token attr-name">buttonRef</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>buttonRef<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span><span class="token plain-text">
                  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UseRef</span></span> <span class="token attr-name">buttonRef</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>buttonRef<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
      <span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> buttonRef <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
          <mark><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>buttonRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span></mark>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>25:["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$37"}}]}]
26:["$","hr",null,{}]
28:["$","hr",null,{}]
2a:["$","hr",null,{}]
30:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
2c:null
2e:{"metadata":[["$","title","0",{"children":"Hooks"}],["$","meta","1",{"name":"description","content":"Notes on using the various hooks in React"}]],"error":null,"digest":"$undefined"}
33:"$2e:metadata"
