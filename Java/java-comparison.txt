1:"$Sreact.fragment"
2:I[79520,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],""]
3:I[35974,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"ThemeProvider"]
4:I[20908,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
5:I[39756,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
6:I[37457,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
10:I[68027,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
:HL["/_next/static/chunks/152b8b3f0ab272fa.css","style"]
0:{"P":null,"b":"OmIHKifZEYfPjohoiIbSa","p":"","c":["","Java","java-comparison"],"i":false,"f":[[["",{"children":["Java",{"children":["java-comparison",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/152b8b3f0ab272fa.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/f3af76091b908de4.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/a4738764f77f4796.js","async":true,"nonce":"$undefined"}],["$","script","script-2",{"src":"/_next/static/chunks/7dd66bdf8a7e5707.js","async":true,"nonce":"$undefined"}]],["$","html",null,{"lang":"en","data-theme":"dark","children":[["$","head",null,{"children":[["$","style",null,{"children":"\n        "}],["$","$L2",null,{"id":"theme-script","strategy":"beforeInteractive","children":"\n            (function() {\n              const theme = localStorage.getItem('data-theme') || 'dark';\n              document.documentElement.dataset.theme = theme;\n              document.documentElement.setAttribute('data-theme', theme);\n            })();\n          "}]]}],["$","body",null,{"id":"root","children":["$","$L3",null,{"children":["$","$L4",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]]}]]}],{"children":["Java",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["java-comparison",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"interface","children":"Interface"}],["$","ul",null,{"children":[["$","li",null,{"children":"Define a \"can-do\" relationship - classes implement abilities"}],["$","li",null,{"children":"No code sharing, only gives methods and properties name"}],["$","li",null,{"children":"One class can implements multiple interface"}],["$","li",null,{"children":"Class follows a structure"}],["$","li",null,{"children":"Best for when unrelated classes need to share the same API"}],["$","ul",null,{"children":["$","li",null,{"children":"Like when integrating third party libraries; use interface so even if the library is changed/updated the purpose stays the same, but implemented in different ways"}]}],["$","li",null,{"children":"Interface is a set of rules that the implementing classes share"}],["$","ul",null,{"children":["$","li",null,{"children":["The classes ",["$","u",null,{"children":"do the same thing, but in different ways"}]]}]}]]}],["$","hr",null,{}]]}],["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"inheritance","children":"Inheritance"}],["$","ul",null,{"children":[["$","li",null,{"children":"Define a \"is-a\" relation - subclasses extend a base class"}],["$","li",null,{"children":[["$","strong",null,{"children":"Allow code sharing"}]," where subclasses inherit methods, variables and constructors"]}],"$L7","$L8","$L9","$La"]}],"$Lb"]}],"$Lc","$Ld"],null,"$Le"]}],{},null,false]},null,false]},null,false]},null,false],"$Lf",false]],"m":"$undefined","G":["$10",["$L11"]],"s":false,"S":true}
18:I[97367,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"OutletBoundary"]
1a:I[11533,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"AsyncMetadataOutlet"]
1c:I[97367,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"ViewportBoundary"]
1e:I[97367,["/_next/static/chunks/f3af76091b908de4.js","/_next/static/chunks/a4738764f77f4796.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"MetadataBoundary"]
1f:"$Sreact.suspense"
7:["$","li",null,{"children":"Can only inherit from one parent (superclass)"}]
8:["$","li",null,{"children":"Subclasses depends on base implementation"}]
9:["$","li",null,{"children":"Best for when classes share common logic and state"}]
a:["$","li",null,{"children":"Inheritance is a blueprint that all subclasses share"}]
b:["$","hr",null,{}]
12:T2379,<span class="token comment">// All payments need to be processed</span>
<span class="token keyword">interface</span> <span class="token class-name">Payment</span> <span class="token punctuation">{</span>
  <span class="token function">processPayment</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Base class for reusable logic</span>
abstract <span class="token keyword">class</span> <span class="token class-name">PaymentProvider</span> <mark><span class="token plain-text">implements Payment</span></mark> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">protected</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">validateAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Invalid amount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  abstract <span class="token function">processPayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment">// Stripe reuses common logic</span>
<span class="token keyword">class</span> <span class="token class-name">StripePayment</span> <span class="token keyword">extends</span> <span class="token class-name">PaymentProvider</span> <span class="token punctuation">{</span>
  <span class="token function">processPayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validateAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Stripe processed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// ApplePay skips base class but still respects interface</span>
<span class="token keyword">class</span> <span class="token class-name">ApplePayPayment</span> <span class="token keyword">implements</span> <span class="token class-name">Payment</span> <span class="token punctuation">{</span>
  <span class="token function">processPayment</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">amount</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ApplePay processed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>amount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment">// Common handler for all payments</span>
<span class="token keyword">function</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">payment</span><span class="token operator">:</span> Payment<span class="token punctuation">,</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  payment<span class="token punctuation">.</span><span class="token function">processPayment</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StripePayment</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplePayPayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"javaExample","children":"Java Example"}],["$","p",null,{"children":"Example for coding different ways to pay"}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$12"}}]}],"$L13"]}]
14:T1523,<span class="token comment">// All payments need to be processed</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Payment</span> <span class="token punctuation">{</span>
  <span class="token function">processPayment</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span><span class="token plain-text">;
}

// Base class for reusable logic
export abstract class PaymentProvider implements Payment </span><span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">protected</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">protected</span> <span class="token function">validateAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Amount must be greater than 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  abstract <span class="token function">processPayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span><span class="token plain-text">;
}
-----------------------------------------------------------
// Stripe reuses common logic
export class StripePayment extends PaymentProvider </span><span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">processPayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validateAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Simulate Stripe API call</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Stripe successfully processed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token plain-text">
}

// ApplePay skips base class but still respects interface
export class ApplePayPayment implements Payment </span><span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">processPayment</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">{</span>
    <span class="token comment">// ApplePay doesn’t need base class logic</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ApplePay processed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>amount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token plain-text">
}</span>d:["$","section",null,{"children":[["$","h3",null,{"className":"section-header","id":"jsExample","children":"Javascript Example with API Route"}],["$","p",null,{"children":"Example for coding different ways to pay alongside Next.js API routes"}],["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$14"}}]}],"$L15","$L16","$L17"]}]
e:["$","$L18",null,{"children":["$L19",["$","$L1a",null,{"promise":"$@1b"}]]}]
f:["$","$1","h",{"children":[null,[["$","$L1c",null,{"children":"$L1d"}],null],["$","$L1e",null,{"children":["$","div",null,{"hidden":true,"children":["$","$1f",null,{"fallback":null,"children":"$L20"}]}]}]]}]
11:["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/152b8b3f0ab272fa.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]
13:["$","hr",null,{}]
15:["$","p",null,{"children":["$","strong",null,{"children":"Putting it together with Next.js API routes"}]}]
21:T2441,<span class="token keyword">import</span> <span class="token punctuation">{</span> NextRequest<span class="token punctuation">,</span> NextResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next/server"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StripePayment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/lib/payments/StripePayment"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PayPalPayment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/lib/payments/PayPalPayment"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApplePayPayment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/lib/payments/ApplePayPayment"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CryptoPayment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/lib/payments/CryptoPayment"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Payment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/lib/payments/Payment"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token constant">POST</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">req</span><span class="token operator">:</span> NextRequest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> provider<span class="token punctuation">,</span> amount <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> req<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token literal-property property">payment</span><span class="token operator">:</span> Payment<span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>provider<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">"stripe"</span><span class="token operator">:</span>
        payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StripePayment</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token keyword">await</span> payment<span class="token punctuation">.</span><span class="token function">processPayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">case</span> <span class="token string">"paypal"</span><span class="token operator">:</span>
        payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayPalPayment</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token keyword">await</span> payment<span class="token punctuation">.</span><span class="token function">processPayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">case</span> <span class="token string">"applepay"</span><span class="token operator">:</span>
        payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplePayPayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token keyword">await</span> payment<span class="token punctuation">.</span><span class="token function">processPayment</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">case</span> <span class="token string">"crypto"</span><span class="token operator">:</span>
        payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CryptoPayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token keyword">await</span> payment<span class="token punctuation">.</span><span class="token function">processPayment</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">"Invalid payment provider"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">400</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> error<span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>16:["$","pre",null,{"className":"language-jsx","children":["$","code",null,{"className":"language-jsx","dangerouslySetInnerHTML":{"__html":"$21"}}]}]
17:["$","hr",null,{}]
1d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
19:null
1b:{"metadata":[["$","title","0",{"children":"Interface vs Inheritance"}],["$","meta","1",{"name":"description","content":"Comparing when to use interface vs inheritance"}]],"error":null,"digest":"$undefined"}
20:"$1b:metadata"
